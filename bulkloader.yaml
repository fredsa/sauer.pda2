# Autogenerated bulkloader.yaml file.
# You must edit this file before using it. TODO: Remove this line when done.
# At a minimum address the items marked with TODO:
#  * Fill in connector and connector_options
#  * Review the property_map.
#    - Ensure the 'external_name' matches the name of your CSV column,
#      XML tag, etc.
#    - Check that __key__ property is what you want. Its value will become
#      the key name on import, and on export the value will be the Key
#      object.  If you would like automatic key generation on import and
#      omitting the key on export, you can remove the entire __key__
#      property from the property map.

# If you have module(s) with your model classes, add them here. Also
# change the kind properties to model_class.
python_preamble:
- import: base64
- import: datetime
- import: re
- import: google.appengine.ext.bulkload.transform
- import: google.appengine.ext.bulkload.bulkloader_wizard
- import: google.appengine.ext.db
- import: google.appengine.api.datastore
- import: google.appengine.api.users

transformers:
# "PERSON","person_id","category","comments","company_name","enabled","first_name","last_name","mailing_name","send_card","title",
- kind: Person
  connector: csv
  connector_options:
  property_map:
  - property: __key__
    external_name: person_id
  - property: category
    external_name: category
  - property: comments
    external_name: comments
    import_transform: 'lambda x: db.Text(x.replace("\\n","\n"))'
  - property: company_name
    external_name: company_name
  - property: enabled
    external_name: enabled
    import_transform: "lambda x: x!='N'"
  - property: first_name
    external_name: first_name
  - property: last_name
    external_name: last_name
  - property: mailing_name
    external_name: mailing_name
  - property: send_card
    external_name: send_card
    import_transform: "lambda x: x!='N'"
  - property: title
    external_name: title

# "CALENDAR","person_id","calendar_id","comments","enabled","first_occurence","frequency","frequency_id","occasion","occasion_id",
- kind: Calendar
  connector: csv
  connector_options:
  property_map:
  - property: __key__
    external_name: calendar_id
    import_transform: "lambda x,bulkload_state: db.Key.from_path('Person', bulkload_state.current_dictionary['person_id'], 'Calendar', bulkload_state.current_dictionary['calendar_id'])"
  - property: comments
    external_name: comments
    import_transform: 'lambda x: db.Text(x.replace("\\n","\n"))'
  - property: enabled
    external_name: enabled
    import_transform: "lambda x: x!='N'"
  - property: first_occurrence
    external_name: first_occurence
    import_transform: "lambda x: datetime.datetime.strptime(x, '%m/%d/%Y')"
  - property: frequency
    external_name: frequency
  - property: occasion
    external_name: occasion

# "CONTACT","person_id","comments","contact_id","contact_method","contact_text","contact_type","enabled",
- kind: Contact
  connector: csv
  connector_options:
  property_map:
  - property: comments
    external_name: comments
    import_transform: 'lambda x: db.Text(x.replace("\\n","\n"))'
  - property: __key__
    external_name: contact_id
    import_transform: "lambda x,bulkload_state: db.Key.from_path('Person', bulkload_state.current_dictionary['person_id'], 'Contact', bulkload_state.current_dictionary['contact_id'])"
  - property: contact_method
    external_name: contact_method
  - property: contact_text
    external_name: contact_text
  - property: contact_type
    external_name: contact_type
  - property: enabled
    external_name: enabled
    import_transform: "lambda x: x!='N'"

# "ADDRESS","person_id","address_id","address_line1","address_line2","address_type","city","comments","country","directions","enabled","postal_code","state_province",
- kind: Address
  connector: csv
  connector_options:
  property_map:
  - property: __key__
    external_name: address_id
    import_transform: "lambda x,bulkload_state: db.Key.from_path('Person', bulkload_state.current_dictionary['person_id'], 'Address', bulkload_state.current_dictionary['address_id'])"
  - property: address_line1
    external_name: address_line1
  - property: address_line2
    external_name: address_line2
  - property: address_type
    external_name: address_type
  - property: city
    external_name: city
  - property: comments
    external_name: comments
    import_transform: 'lambda x: db.Text(x.replace("\\n","\n"))'
  - property: country
    external_name: country
  - property: directions
    external_name: directions
    import_transform: 'lambda x: db.Text(x.replace("\\n","\n"))'
  - property: enabled
    external_name: enabled
    import_transform: "lambda x: x!='N'"
  - property: postal_code
    external_name: postal_code
  - property: state_province
    external_name: state_province

